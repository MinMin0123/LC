/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 https://segmentfault.com/a/1190000007443961
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) {
            vector<TreeNode*> ret;
            return ret;
        }
        return generateTrees(n, 1);
    }
    vector<TreeNode*> generateTrees(int n, int val_start) {
        vector<TreeNode*> ret;
        if (n == 0) { 
            ret.push_back(NULL);
            return ret;
        }
        if (n == 1) {
            ret.push_back(new TreeNode(val_start));
            return ret;
        }
        
        for (int i = 0; i < n; i++) {
            vector<TreeNode*> left = generateTrees(i, val_start);
            vector<TreeNode*> right = generateTrees(n-1-i, val_start+i+1);
            for (int l = 0; l < left.size(); l++) {
                for (int r = 0; r < right.size(); r++) {
                    TreeNode* root = new TreeNode(val_start+i);
                    root->left = left[l];
                    root->right = right[r];
                    ret.push_back(root);
                }
            }
        }
        
        return ret;
    }
};
