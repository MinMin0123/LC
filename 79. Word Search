/**
对于任何board中的一个元素，如果它上下左右的元素存在并且没有被访问到，则存在着向上，向下，向左，向右的四条搜索路径，那么将这条搜索路径定义成递归函数，这个递归函数需要知道搜索点的位置以及word中剩下的子字符串。递归的终止条件是word中剩下的子字符串为空。 
由于board中的每一个元素都可能成为递归的开始点，所以需要对board做一次双重循环，对于一个元素是否被访问到，可以定义一个和board相同大小的表mask来表示元素是否已经被访问到，已经访问到的将mask中对应的值记为1
**/
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int height=board.size();//行大小
        if(height==0)
            return false;
        int width=board[0].size();//列大小
        vector<vector<int> > mask(height,vector<int>(width,0));//0表示该元素没被使用
        for(int i=0;i<height;i++){
            for(int j=0;j<width;j++){
                    if(backtrack(board,word,i,j,0,mask))
                        return true;
            }
        }
        return false;

    }

    //从节点board[i][j]开始查找word
    bool backtrack(vector<vector<char>>& board,string word,int i,int j,int pos,vector<vector<int>> &mask)
    {
        int height=board.size();
        int width=board[0].size();
        if(board[i][j]!=word.at(pos))
            return false;
        if(pos==word.size()-1)
            return true;

        mask[i][j]=1;

        //向右
        if(j+1<width&&mask[i][j+1]==0&&backtrack(board,word,i,j+1,pos+1,mask))
                return true;
        //向下
        if(i+1<height&&mask[i+1][j]==0&&backtrack(board,word,i+1,j,pos+1,mask))
                return true;
        //向左
        if(i-1>=0&&mask[i-1][j]==0&&backtrack(board,word,i-1,j,pos+1,mask))
                return true;
        //向上
        if(j-1>=0&&mask[i][j-1]==0&&backtrack(board,word,i,j-1,pos+1,mask))
                return true;

        mask[i][j]=0;
        return false;
    }
};
