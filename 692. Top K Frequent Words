//https://www.jianshu.com/p/a33a8ef0b9b2
struct cmp{  // priority_queue的自定义排序重载
    bool operator() (pair<string, int> a, pair<string, int> b) {
        if (a.second == b.second) return a.first > b.first; // 直接使用string的符号比较
        return a.second < b.second; // 字典序最低到最高
    }
};


class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> map;
        priority_queue< pair<string, int>, vector< pair<string, int> >, cmp> que;
        vector<string> res;
        
        for (string s : words) map[s]++; // 统计每个单词出现的次数
        
        for (auto p : map) que.push(p); // 将每一组映射加入priority_queue
        
        for (int i = 0; i < k; i++) {
            res.emplace_back(que.top().first); // 取出前k个队列元素
            que.pop();
        }
        return res;

    }
};
