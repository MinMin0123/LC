/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
            vector<Interval> res;
            sort(intervals.begin(),intervals.end(), [](const Interval& left,
                        const Interval& right){return left.start<right.start;});
            for(auto i:intervals){
                if(res.empty() || res.back().end<i.start)
                    res.push_back(i);
                else
                    res.back().end=max(res.back().end,i.end);
            }
            return res;

    }
};
